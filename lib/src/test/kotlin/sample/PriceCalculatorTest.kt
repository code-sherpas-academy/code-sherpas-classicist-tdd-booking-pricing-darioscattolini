/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sample

import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource

class PriceCalculatorTest {
    @ParameterizedTest
    @CsvSource("0.30, 60, 0.30", "0.20, 120, 0.40", "0.2, 900, 3")
    fun `calculates price with whole minutes`(pricePerMinute: Double, timeInSeconds: Int, expectedPrice: Double) {
        val calculator = PriceCalculator(pricePerMinute)

        assertThat(calculator.getPrice(timeInSeconds)).isEqualTo(expectedPrice)
    }

    @ParameterizedTest
    @CsvSource("0.30, 61, 0.60", "0.20, 150, 0.60", "0.2, 959, 3.2")
    fun `prices with non-whole minutes are rounded to next minute`(
        pricePerMinute: Double,
        timeInSeconds: Int,
        expectedPrice: Double
    ) {
        val calculator = PriceCalculator(pricePerMinute)

        assertThat(calculator.getPrice(timeInSeconds)).isEqualTo(expectedPrice)
    }

    @ParameterizedTest
    @CsvSource("0.30, 59", "0.20, 30", "1, 1")
    fun `price is free for trips lasting less than 1 minute`(pricePerMinute: Double, timeInSeconds: Int) {
        val calculator = PriceCalculator(pricePerMinute)

        assertThat(calculator.getPrice(timeInSeconds)).isEqualTo(0.0)
    }

    @ParameterizedTest
    @CsvSource("0.30, 60, 20, 0.24", "0.20, 150, 25, 0.45", "0.2, 959, 10, 2.88")
    fun `trip price discounts are applied`(
        pricePerMinute: Double,
        timeInSeconds: Int,
        priceDiscount: Int,
        expectedPrice: Double
    ) {
        val calculator = PriceCalculator(pricePerMinute)
        calculator.setDiscountOnFinalPrice(priceDiscount)

        assertThat(calculator.getPrice(timeInSeconds)).isEqualTo(expectedPrice)
    }

    @ParameterizedTest
    @CsvSource("0.30, 60, 20, 0.24", "0.20, 150, 25, 0.45", "0.2, 959, 10, 2.88")
    fun `rate discounts are applied`(
        pricePerMinute: Double,
        timeInSeconds: Int,
        rateDiscount: Int,
        expectedPrice: Double
    ) {
        val calculator = PriceCalculator(pricePerMinute)
        calculator.setDiscountOnRate(rateDiscount)

        assertThat(calculator.getPrice(timeInSeconds)).isEqualTo(expectedPrice)
    }
}
